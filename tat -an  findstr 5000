const DeliveryTask = require('../models/deliveryTaskModel');
const Notification = require('../models/Notification');
const DeliveryIntake = require('../models/deliveryIntakeModel');
const sendEmail = require('../utils/sendEmail');
const User = require('../models/userModel');
const StaffLocation = require('../models/StaffLocation');

// Create a delivery task (admin/manager)
exports.createTask = async (req, res) => {
  try {
    const { title, customerUserId, assignedTo, pickupAddress, dropAddress, scheduledAt, notes } = req.body;
    if (!title || !assignedTo || !pickupAddress || !dropAddress) {
      return res.status(400).json({ message: 'title, assignedTo, pickupAddress and dropAddress are required' });
    }
    const doc = await DeliveryTask.create({ title, customerUserId, assignedTo, pickupAddress, dropAddress, scheduledAt, notes });

    // Notify customer about schedule
    if (customerUserId) {
      await Notification.create({
        userId: customerUserId,
        role: 'user',
        title: 'Pickup Scheduled',
        message: `Pickup scheduled: ${title}`,
        link: '/user/notifications',
        meta: { taskId: doc._id, scheduledAt }
      });
    }

    return res.status(201).json(doc);
  } catch (e) {
    return res.status(500).json({ message: 'Server Error', error: e.message });
  }
};

// Manager verify intake (mark as manager_verified)
exports.verifyIntake = async (req, res) => {
  try {
    const { id } = req.params;
    const doc = await DeliveryIntake.findById(id);
    if (!doc) return res.status(404).json({ message: 'Intake not found' });
    doc.status = 'manager_verified';
    doc.verifiedAt = new Date();
    doc.verifiedBy = req.user._id;
    await doc.save();

    // Optionally create a Delivery Task if details are provided
    const { assignedTo, pickupAddress, dropAddress, scheduledAt, notes, title } = req.body || {};
    let task = null;
    if (assignedTo && pickupAddress && dropAddress) {
      task = await DeliveryTask.create({
        title: title || `Barrel Pickup (${doc.barrelCount})`,
        customerUserId: req.user._id, // manager initiator; can be updated to actual customer later if needed
        assignedTo,
        pickupAddress,
        dropAddress,
        scheduledAt,
        notes,
        meta: { intakeId: doc._id }
      });
    }
    return res.json({ success: true, intake: doc, task });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to verify intake', error: e.message });
  }
};

// Get single intake by id
exports.getIntake = async (req, res) => {
  try {
    const doc = await DeliveryIntake.findById(req.params.id);
    if (!doc) return res.status(404).json({ message: 'Intake not found' });
    return res.json({ intake: doc });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to load intake', error: e.message });
  }
};

// Update intake fields (name, phone, barrelCount, notes, status, companyBarrel) - admin/manager/accountant
exports.updateIntake = async (req, res) => {
  try {
    const updates = (({ name, phone, barrelCount, notes, status, pricePerBarrel, totalAmount, companyBarrel }) => ({ name, phone, barrelCount, notes, status, pricePerBarrel, totalAmount, companyBarrel }))(req.body || {});
    const doc = await DeliveryIntake.findByIdAndUpdate(req.params.id, updates, { new: true });
    if (!doc) return res.status(404).json({ message: 'Intake not found' });
    try {
      if (doc.createdBy && (updates.barrelCount != null || updates.companyBarrel != null)) {
        await Notification.create({
          userId: doc.createdBy,
          role: 'user',
          title: 'Sell request updated',
          message: `Your sell request has been updated${updates.barrelCount != null ? `: barrel count = ${updates.barrelCount}` : ''}${updates.companyBarrel != null ? `, company barrel = ${updates.companyBarrel}` : ''}.`,
          link: '/user/requests',
          meta: { intakeId: doc._id, type: 'SELL_BARRELS' }
        });
      }
    } catch (_) { /* ignore notification errors */ }
    return res.json({ intake: doc });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to update intake', error: e.message });
  }
};

// Delete intake
exports.deleteIntake = async (req, res) => {
  try {
    const doc = await DeliveryIntake.findByIdAndDelete(req.params.id);
    if (!doc) return res.status(404).json({ message: 'Intake not found' });
    return res.json({ success: true });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to delete intake', error: e.message });
  }
};

// Admin/Manager: list all tasks with optional status filter and basic pagination
exports.listAllTasks = async (req, res) => {
  try {
    const { status, page = 1, limit = 50 } = req.query || {};
    const q = {};
    if (status) q.status = status;
    const skip = (Math.max(Number(page), 1) - 1) * Math.max(Number(limit), 1);
    const [items, total] = await Promise.all([
      DeliveryTask.find(q).sort({ createdAt: -1 }).skip(skip).limit(Number(limit)),
      DeliveryTask.countDocuments(q)
    ]);
    return res.json({ items, total, page: Number(page), limit: Number(limit) });
  } catch (e) {
    return res.status(500).json({ message: 'Server Error', error: e.message });
  }
};

// Get single task by id
exports.getTask = async (req, res) => {
  try {
    const doc = await DeliveryTask.findById(req.params.id);
    if (!doc) return res.status(404).json({ message: 'Task not found' });
    return res.json(doc);
  } catch (e) {
    return res.status(500).json({ message: 'Server Error', error: e.message });
  }
};

// Update task fields (admin/manager only)
exports.updateTask = async (req, res) => {
  try {
    const updates = (({ title, customerUserId, assignedTo, pickupAddress, dropAddress, scheduledAt, notes, status }) => ({ title, customerUserId, assignedTo, pickupAddress, dropAddress, scheduledAt, notes, status }))(req.body || {});
    const doc = await DeliveryTask.findByIdAndUpdate(req.params.id, updates, { new: true });
    if (!doc) return res.status(404).json({ message: 'Task not found' });
    return res.json(doc);
  } catch (e) {
    return res.status(500).json({ message: 'Failed to update task', error: e.message });
  }
};

// Delete task (admin/manager only)
exports.deleteTask = async (req, res) => {
  try {
    const doc = await DeliveryTask.findByIdAndDelete(req.params.id);
    if (!doc) return res.status(404).json({ message: 'Task not found' });
    return res.json({ success: true });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to delete task', error: e.message });
  }
};

// Helper: compute remaining allowance for a user (0 or undefined allowance means unlimited)
async function computeRemainingAllowance(userId) {
  const user = await User.findById(userId).lean();
  if (!user) return { allowance: 0, used: 0, remaining: 0 };
  const allowance = Number(user.sellAllowance || 0);
  if (!Number.isFinite(allowance) || allowance <= 0) {
    // Unlimited when not set or 0
    return { allowance: 0, used: 0, remaining: Infinity };
  }
  const activeStatuses = ['pending', 'manager_verified', 'approved'];
  const used = await DeliveryIntake.aggregate([
    { $match: { createdBy: user._id, status: { $in: activeStatuses } } },
    { $group: { _id: null, total: { $sum: '$barrelCount' } } }
  ]).then(a => (a[0]?.total || 0));
  const remaining = Math.max(allowance - Number(used || 0), 0);
  return { allowance, used, remaining };
}

// Record delivery barrel intake (delivery staff)
exports.intakeBarrels = async (req, res) => {
  try {
    const { name, phone, barrelCount, notes, location, locationAccuracy } = req.body || {};
    if (!name || !phone || barrelCount === undefined) {
      return res.status(400).json({ message: 'name, phone, and barrelCount are required' });
    }
    const count = Number(barrelCount);
    if (!Number.isFinite(count) || count < 1) {
      return res.status(400).json({ message: 'barrelCount must be at least 1' });
    }
    // Enforce user allowance if configured
    const { allowance, remaining } = await computeRemainingAllowance(req.user._id);
    if (Number.isFinite(remaining) && count > remaining) {
      return res.status(400).json({ message: `Requested barrels (${count}) exceed remaining allowance (${remaining})`, code: 'ALLOWANCE_EXCEEDED', allowance, remaining });
    }
    const doc = await DeliveryIntake.create({
      name: String(name).trim(),
      phone: String(phone).trim(),
      barrelCount: count,
      notes: notes ? String(notes) : undefined,
      createdBy: req.user._id,
      status: 'pending',
      ...(location && location.type === 'Point' && Array.isArray(location.coordinates) && location.coordinates.length === 2
        ? { location: { type: 'Point', coordinates: [Number(location.coordinates[0]), Number(location.coordinates[1])] } }
        : {}),
      ...(locationAccuracy !== undefined ? { locationAccuracy: Number(locationAccuracy) } : {}),
    });
    return res.status(201).json({ success: true, intake: doc });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to record intake', error: e.message });
  }
};

// Get my allowance and remaining
exports.getMySellAllowance = async (req, res) => {
  try {
    const { allowance, used, remaining } = await computeRemainingAllowance(req.user._id);
    return res.json({ success: true, allowance, used, remaining });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to load allowance', error: e.message });
  }
};

// Set a user's allowance (admin/manager)
exports.setUserSellAllowance = async (req, res) => {
  try {
    const { userId } = req.params;
    const { allowance } = req.body || {};
    const value = Number(allowance || 0);
    if (!Number.isFinite(value) || value < 0) return res.status(400).json({ message: 'allowance must be >= 0' });
    const user = await User.findByIdAndUpdate(userId, { sellAllowance: value, sellAllowanceUpdatedAt: new Date(), sellAllowanceSetBy: req.user._id }, { new: true });
    if (!user) return res.status(404).json({ message: 'User not found' });
    const metrics = await computeRemainingAllowance(user._id);
    return res.json({ success: true, userId: user._id, ...metrics });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to set allowance', error: e.message });
  }
};

// List intakes (filter by status) for accountant/manager/admin
exports.listIntakes = async (req, res) => {
  try {
    const { status } = req.query || {};
    const q = {};
    if (status) q.status = status;
    const items = await DeliveryIntake.find(q).sort({ createdAt: -1 }).lean();
    return res.json({ success: true, items });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to load intakes', error: e.message });
  }
};

// List my intakes (created by current user)
exports.listMyIntakes = async (req, res) => {
  try {
    const items = await DeliveryIntake.find({ createdBy: req.user._id }).sort({ createdAt: -1 }).lean();
    return res.json({ success: true, items });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to load my intakes', error: e.message });
  }
};

// Approve intake and set price to compute total amount (accountant/manager/admin)
exports.approveIntake = async (req, res) => {
  try {
    const { id } = req.params;
    const { pricePerBarrel } = req.body || {};
    const doc = await DeliveryIntake.findById(id);
    if (!doc) return res.status(404).json({ message: 'Intake not found' });
    if (pricePerBarrel === undefined || pricePerBarrel === null) {
      return res.status(400).json({ message: 'pricePerBarrel is required' });
    }
    const rate = Number(pricePerBarrel);
    doc.pricePerBarrel = rate;
    doc.totalAmount = Math.round(Number(doc.barrelCount || 0) * rate);
    doc.status = 'approved';
    doc.approvedAt = new Date();
    doc.approvedBy = req.user._id;
    await doc.save();
    return res.json({ success: true, intake: doc });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to approve intake', error: e.message });
  }
};

// List tasks for current staff (or filter)
exports.listMyTasks = async (req, res) => {
  try {
    const q = {};
    if (req.user.role === 'delivery_staff') {
      q.assignedTo = req.user._id;
    }
    if (req.query.status) q.status = req.query.status;
    const list = await DeliveryTask.find(q).sort({ scheduledAt: 1, createdAt: -1 });
    return res.json(list);
  } catch (e) {
    return res.status(500).json({ message: 'Server Error', error: e.message });
  }
};

// Update status (assigned staff or admin)
exports.updateStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, meta } = req.body;
    const task = await DeliveryTask.findById(id);
    if (!task) return res.status(404).json({ message: 'Task not found' });

    const canUpdate = req.user.role === 'admin' || String(task.assignedTo) === String(req.user._id);
    if (!canUpdate) return res.status(403).json({ message: 'Not authorized' });

    // Allowed transitions
    const allowed = {
      pickup_scheduled: ['enroute_pickup', 'cancelled'],
      enroute_pickup: ['picked_up', 'cancelled'],
      picked_up: ['enroute_drop', 'cancelled'],
      enroute_drop: ['delivered', 'cancelled'],
      delivered: [],
      cancelled: [],
    };
    const validStatuses = Object.keys(allowed);
    if (status && !validStatuses.includes(status)) {
      return res.status(400).json({ message: 'Invalid status value' });
    }

    if (status) {
      const current = task.status || 'pickup_scheduled';
      if (current !== status) {
        const nexts = allowed[current] || [];
        if (!nexts.includes(status)) {
          return res.status(400).json({ message: `Illegal transition from ${current} to ${status}` });
        }
      }
      // Stamp timeline
      const now = new Date();
      if (status === 'enroute_pickup') task.meta.set('pickupStartedAt', now);
      if (status === 'picked_up') task.meta.set('pickedUpAt', now);
      if (status === 'enroute_drop') task.meta.set('dropStartedAt', now);
      if (status === 'delivered') task.meta.set('deliveredAt', now);
      if (status === 'cancelled') {
        task.meta.set('cancelledAt', now);
        if (meta?.reason) task.meta.set('cancelReason', String(meta.reason));
      }
      task.status = status;
    }

    if (meta && typeof meta === 'object') {
      Object.entries(meta).forEach(([k, v]) => task.meta.set(k, v));
    }
    await task.save();

    // Notifications on key transitions
    if (task.customerUserId) {
      if (status === 'enroute_pickup') {
        await Notification.create({ userId: task.customerUserId, role: 'user', title: 'Pickup Enroute', message: 'Our staff is on the way for pickup', link: '/user/notifications', meta: { taskId: task._id } });
      }
      if (status === 'picked_up') {
        await Notification.create({ userId: task.customerUserId, role: 'user', title: 'Pickup Completed', message: 'Your barrels have been picked up', link: '/user/notifications', meta: { taskId: task._id } });
        // Try to email the user as well
        try {
          const user = await User.findById(task.customerUserId).lean();
          const emailTo = meta?.notifyEmail || user?.email;
          if (emailTo) {
            await sendEmail({
              email: emailTo,
              subject: 'HFP: Barrels Picked Up',
              message: `Hello, your delivery task "${task.title}" has been picked up. Task ID: ${task._id}`,
            });
          }
        } catch (_) { /* ignore email errors */ }
      }
      if (status === 'delivered') {
        await Notification.create({ userId: task.customerUserId, role: 'user', title: 'Delivery Completed', message: 'Delivery has been completed', link: '/user/notifications', meta: { taskId: task._id } });
      }
    }

    return res.json(task);
  } catch (e) {
    return res.status(500).json({ message: 'Server Error', error: e.message });
  }
};

// --- Live location: delivery staff updates their current location ---
exports.updateMyLocation = async (req, res) => {
  try {
    const { latitude, longitude, accuracy, meta } = req.body || {};
    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      return res.status(400).json({ message: 'latitude and longitude (numbers) are required' });
    }
    const payload = {
      user: req.user._id,
      role: req.user.role,
      coords: { lat: latitude, lng: longitude, accuracy: accuracy != null ? Number(accuracy) : undefined },
      meta: meta && typeof meta === 'object' ? meta : {},
      updatedAt: new Date(),
    };
    const doc = await StaffLocation.findOneAndUpdate(
      { user: req.user._id },
      { $set: payload },
      { upsert: true, new: true }
    );
    return res.json({ success: true, location: doc });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to update location', error: e.message });
  }
};

// --- Manager/Admin: list recent staff locations (optionally filter by role) ---
exports.listStaffLocations = async (req, res) => {
  try {
    const { role } = req.query || {};
    const q = {};
    if (role) q.role = role;
    const items = await StaffLocation.find(q).populate('user', 'name email role').sort({ updatedAt: -1 }).lean();
    return res.json({ success: true, items });
  } catch (e) {
    return res.status(500).json({ message: 'Failed to load staff locations', error: e.message });
  }
};

                   SSUUMMMMAARRYY OOFF LLEESSSS CCOOMMMMAANNDDSS

      Commands marked with * may be preceded by a number, _N.
      Notes in parentheses indicate the behavior if _N is given.
      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.

  h  H                 Display this help.
  q  :q  Q  :Q  ZZ     Exit.
 ---------------------------------------------------------------------------

                           MMOOVVIINNGG

  e  ^E  j  ^N  CR  *  Forward  one line   (or _N lines).
  y  ^Y  k  ^K  ^P  *  Backward one line   (or _N lines).
  f  ^F  ^V  SPACE  *  Forward  one window (or _N lines).
  b  ^B  ESC-v      *  Backward one window (or _N lines).
  z                 *  Forward  one window (and set window to _N).
  w                 *  Backward one window (and set window to _N).
  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.
  d  ^D             *  Forward  one half-window (and set half-window to _N).
  u  ^U             *  Backward one half-window (and set half-window to _N).
  ESC-)  RightArrow *  Right one half screen width (or _N positions).
  ESC-(  LeftArrow  *  Left  one half screen width (or _N positions).
  ESC-}  ^RightArrow   Right to last column displayed.
  ESC-{  ^LeftArrow    Left  to first column.
  F                    Forward forever; like "tail -f".
  ESC-F                Like F but stop when search pattern is found.
  r  ^R  ^L            Repaint screen.
  R                    Repaint screen, discarding buffered input.
        ---------------------------------------------------
        Default "window" is the screen height.
        Default "half-window" is half of the screen height.
 ---------------------------------------------------------------------------

                          SSEEAARRCCHHIINNGG

  /_p_a_t_t_e_r_n          *  Search forward for (_N-th) matching line.
  ?_p_a_t_t_e_r_n          *  Search backward for (_N-th) matching line.
  n                 *  Repeat previous search (for _N-th occurrence).
  N                 *  Repeat previous search in reverse direction.
  ESC-n             *  Repeat previous search, spanning files.
  ESC-N             *  Repeat previous search, reverse dir. & spanning files.
  ^O^N  ^On         *  Search forward for (_N-th) OSC8 hyperlink.
  ^O^P  ^Op         *  Search backward for (_N-th) OSC8 hyperlink.
  ^O^L  ^Ol            Jump to the currently selected OSC8 hyperlink.
  ESC-u                Undo (toggle) search highlighting.
  ESC-U                Clear search highlighting.
  &_p_a_t_t_e_r_n          *  Display only matching lines.
        ---------------------------------------------------
        A search pattern may begin with one or more of:
        ^N or !  Search for NON-matching lines.
        ^E or *  Search multiple files (pass thru END OF FILE).
        ^F or @  Start search at FIRST file (for /) or last file (for ?).
        ^K       Highlight matches, but don't move (KEEP position).
        ^R       Don't use REGULAR EXPRESSIONS.
        ^S _n     Search for match in _n-th parenthesized subpattern.
        ^W       WRAP search if no match found.
        ^L       Enter next character literally into pattern.
 ---------------------------------------------------------------------------

                           JJUUMMPPIINNGG

  g  <  ESC-<       *  Go to first line in file (or line _N).
  G  >  ESC->       *  Go to last line in file (or line _N).
  p  %              *  Go to beginning of file (or _N percent into file).
  t                 *  Go to the (_N-th) next tag.
  T                 *  Go to the (_N-th) previous tag.
  {  (  [           *  Find close bracket } ) ].
  }  )  ]           *  Find open bracket { ( [.
  ESC-^F _<_c_1_> _<_c_2_>  *  Find close bracket _<_c_2_>.
  ESC-^B _<_c_1_> _<_c_2_>  *  Find open bracket _<_c_1_>.
        ---------------------------------------------------
        Each "find close bracket" command goes forward to the close bracket 
          matching the (_N-th) open bracket in the top line.
        Each "find open bracket" command goes backward to the open bracket 
          matching the (_N-th) close bracket in the bottom line.

  m_<_l_e_t_t_e_r_>            Mark the current top line with <letter>.
  M_<_l_e_t_t_e_r_>            Mark the current bottom line with <letter>.
  '_<_l_e_t_t_e_r_>            Go to a previously marked position.
  ''                   Go to the previous position.
  ^X^X                 Same as '.
  ESC-m_<_l_e_t_t_e_r_>        Clear a mark.
        ---------------------------------------------------
        A mark is any upper-case or lower-case letter.
        Certain marks are predefined:
             ^  means  beginning of the file
             $  means  end of the file
 ---------------------------------------------------------------------------

                        CCHHAANNGGIINNGG FFIILLEESS

  :e [_f_i_l_e]            Examine a new file.
  ^X^V                 Same as :e.
  :n                *  Examine the (_N-th) next file from the command line.
  :p                *  Examine the (_N-th) previous file from the command line.
  :x                *  Examine the first (or _N-th) file from the command line.
  ^O^O                 Open the currently selected OSC8 hyperlink.
  :d                   Delete the current file from the command line list.
  =  ^G  :f            Print current file name.
 ---------------------------------------------------------------------------

                    MMIISSCCEELLLLAANNEEOOUUSS CCOOMMMMAANNDDSS

  -_<_f_l_a_g_>              Toggle a command line option [see OPTIONS below].
  --_<_n_a_m_e_>             Toggle a command line option, by name.
  __<_f_l_a_g_>              Display the setting of a command line option.
  ___<_n_a_m_e_>             Display the setting of an option, by name.
  +_c_m_d                 Execute the less cmd each time a new file is examined.

  !_c_o_m_m_a_n_d             Execute the shell command with $SHELL.
  #_c_o_m_m_a_n_d             Execute the shell command, expanded like a prompt.
  |XX_c_o_m_m_a_n_d            Pipe file between current pos & mark XX to shell command.
  s _f_i_l_e               Save input to a file.
  v                    Edit the current file with $VISUAL or $EDITOR.
  V                    Print version number of "less".
 ---------------------------------------------------------------------------

                           OOPPTTIIOONNSS

        Most options may be changed either on the command line,
        or from within less by using the - or -- command.
        Options may be given in one of two forms: either a single
        character preceded by a -, or a name preceded by --.

  -?  ........  --help
                  Display help (from command line).
  -a  ........  --search-skip-screen
                  Search skips current screen.
  -A  ........  --SEARCH-SKIP-SCREEN
                  Search starts just after target line.
  -b [_N]  ....  --buffers=[_N]
                  Number of buffers.
  -B  ........  --auto-buffers
                  Don't automatically allocate buffers for pipes.
  -c  ........  --clear-screen
                  Repaint by clearing rather than scrolling.
  -d  ........  --dumb
                  Dumb terminal.
  -D xx_c_o_l_o_r  .  --color=xx_c_o_l_o_r
                  Set screen colors.
  -e  -E  ....  --quit-at-eof  --QUIT-AT-EOF
                  Quit at end of file.
  -f  ........  --force
                  Force open non-regular files.
  -F  ........  --quit-if-one-screen
                  Quit if entire file fits on first screen.
  -g  ........  --hilite-search
                  Highlight only last match for searches.
  -G  ........  --HILITE-SEARCH
                  Don't highlight any matches for searches.
  -h [_N]  ....  --max-back-scroll=[_N]
                  Backward scroll limit.
  -i  ........  --ignore-case
                  Ignore case in searches that do not contain uppercase.
  -I  ........  --IGNORE-CASE
                  Ignore case in all searches.
  -j [_N]  ....  --jump-target=[_N]
                  Screen position of target lines.
  -J  ........  --status-column
                  Display a status column at left edge of screen.
  -k _f_i_l_e  ...  --lesskey-file=_f_i_l_e
                  Use a compiled lesskey file.
  -K  ........  --quit-on-intr
                  Exit less in response to ctrl-C.
  -L  ........  --no-lessopen
                  Ignore the LESSOPEN environment variable.
  -m  -M  ....  --long-prompt  --LONG-PROMPT
                  Set prompt style.
  -n .........  --line-numbers
                  Suppress line numbers in prompts and messages.
  -N .........  --LINE-NUMBERS
                  Display line number at start of each line.
  -o [_f_i_l_e] ..  --log-file=[_f_i_l_e]
                  Copy to log file (standard input only).
  -O [_f_i_l_e] ..  --LOG-FILE=[_f_i_l_e]
                  Copy to log file (unconditionally overwrite).
  -p _p_a_t_t_e_r_n .  --pattern=[_p_a_t_t_e_r_n]
                  Start at pattern (from command line).
  -P [_p_r_o_m_p_t]   --prompt=[_p_r_o_m_p_t]
                  Define new prompt.
  -q  -Q  ....  --quiet  --QUIET  --silent --SILENT
                  Quiet the terminal bell.
  -r  -R  ....  --raw-control-chars  --RAW-CONTROL-CHARS
                  Output "raw" control characters.
  -s  ........  --squeeze-blank-lines
                  Squeeze multiple blank lines.
  -S  ........  --chop-long-lines
                  Chop (truncate) long lines rather than wrapping.
  -t _t_a_g  ....  --tag=[_t_a_g]
                  Find a tag.
  -T [_t_a_g_s_f_i_l_e] --tag-file=[_t_a_g_s_f_i_l_e]
                  Use an alternate tags file.
  -u  -U  ....  --underline-special  --UNDERLINE-SPECIAL
                  Change handling of backspaces, tabs and carriage returns.
  -V  ........  --version
                  Display the version number of "less".
  -w  ........  --hilite-unread
                  Highlight first new line after forward-screen.
  -W  ........  --HILITE-UNREAD
                  Highlight first new line after any forward movement.
  -x [_N[,...]]  --tabs=[_N[,...]]
                  Set tab stops.
  -X  ........  --no-init
                  Don't use termcap init/deinit strings.
  -y [_N]  ....  --max-forw-scroll=[_N]
                  Forward scroll limit.
  -z [_N]  ....  --window=[_N]
                  Set size of window.
  -" [_c[_c]]  .  --quotes=[_c[_c]]
                  Set shell quote characters.
  -~  ........  --tilde
                  Don't display tildes after end of file.
  -# [_N]  ....  --shift=[_N]
                  Set horizontal scroll amount (0 = one half screen width).

                --exit-follow-on-close
                  Exit F command on a pipe when writer closes pipe.
                --file-size
                  Automatically determine the size of the input file.
                --follow-name
                  The F command changes files if the input file is renamed.
                --header=[_L[,_C[,_N]]]
                  Use _L lines (starting at line _N) and _C columns as headers.
                --incsearch
                  Search file as each pattern character is typed in.
                --intr=[_C]
                  Use _C instead of ^X to interrupt a read.
                --lesskey-context=_t_e_x_t
                  Use lesskey source file contents.
                --lesskey-src=_f_i_l_e
                  Use a lesskey source file.
                --line-num-width=[_N]
                  Set the width of the -N line number field to _N characters.
                --match-shift=[_N]
                  Show at least _N characters to the left of a search match.
                --modelines=[_N]
                  Read _N lines from the input file and look for vim modelines.
                --mouse
                  Enable mouse input.
                --no-keypad
                  Don't send termcap keypad init/deinit strings.
                --no-histdups
                  Remove duplicates from command history.
                --no-number-headers
                  Don't give line numbers to header lines.
                --no-search-header-lines
                  Searches do not include header lines.
                --no-search-header-columns
                  Searches do not include header columns.
                --no-search-headers
                  Searches do not include header lines or columns.
                --no-vbell
                  Disable the terminal's visual bell.
                --redraw-on-quit
                  Redraw final screen when quitting.
                --rscroll=[_C]
                  Set the character used to mark truncated lines.
                --save-marks
                  Retain marks across invocations of less.
                --search-options=[EFKNRW-]
                  Set default options for every search.
                --show-preproc-errors
                  Display a message if preprocessor exits with an error status.
                --proc-backspace
                  Process backspaces for bold/underline.
                --PROC-BACKSPACE
                  Treat backspaces as control characters.
                --proc-return
                  Delete carriage returns before newline.
                --PROC-RETURN
                  Treat carriage returns as control characters.
                --proc-tab
                  Expand tabs to spaces.
                --PROC-TAB
                  Treat tabs as control characters.
                --status-col-width=[_N]
                  Set the width of the -J status column to _N characters.
                --status-line
                  Highlight or color the entire line containing a mark.
                --use-backslash
                  Subsequent options use backslash as escape char.
                --use-color
                  Enables colored text.
                --wheel-lines=[_N]
                  Each click of the mouse wheel moves _N lines.
                --wordwrap
                  Wrap lines at spaces.


 ---------------------------------------------------------------------------

                          LLIINNEE EEDDIITTIINNGG

        These keys can be used to edit text being entered 
        on the "command line" at the bottom of the screen.

 RightArrow ..................... ESC-l ... Move cursor right one character.
 LeftArrow ...................... ESC-h ... Move cursor left one character.
 ctrl-RightArrow  ESC-RightArrow  ESC-w ... Move cursor right one word.
 ctrl-LeftArrow   ESC-LeftArrow   ESC-b ... Move cursor left one word.
 HOME ........................... ESC-0 ... Move cursor to start of line.
 END ............................ ESC-$ ... Move cursor to end of line.
 BACKSPACE ................................ Delete char to left of cursor.
 DELETE ......................... ESC-x ... Delete char under cursor.
 ctrl-BACKSPACE   ESC-BACKSPACE ........... Delete word to left of cursor.
 ctrl-DELETE .... ESC-DELETE .... ESC-X ... Delete word under cursor.
 ctrl-U ......... ESC (MS-DOS only) ....... Delete entire line.
 UpArrow ........................ ESC-k ... Retrieve previous command line.
 DownArrow ...................... ESC-j ... Retrieve next command line.
 TAB ...................................... Complete filename & cycle.
 SHIFT-TAB ...................... ESC-TAB   Complete filename & reverse cycle.
 ctrl-L ................................... Complete filename, list all.
